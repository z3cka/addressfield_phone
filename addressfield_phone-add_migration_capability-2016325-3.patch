diff --git a/addressfield_phone.info b/addressfield_phone.info
index b3251a4..ba24028 100644
--- a/addressfield_phone.info
+++ b/addressfield_phone.info
@@ -2,6 +2,9 @@ name = Address Field Phone
 description = Implements a phone field in an addressfield format handler.
 core = 7.x
 package = Fields
+project = addressfield_phone
 
 dependencies[] = ctools
 dependencies[] = addressfield
+
+files[] = addressfield_phone.migrate.inc
diff --git a/addressfield_phone.migrate.inc b/addressfield_phone.migrate.inc
new file mode 100644
index 0000000..92c8c57
--- /dev/null
+++ b/addressfield_phone.migrate.inc
@@ -0,0 +1,65 @@
+<?php
+
+/**
+ * Implements hook_migrate_api().
+ */
+function addressfield_phone_migrate_api() {
+  $api = array(
+    'api' => 2,
+    'field handlers' => array('MigrateAddressPhoneFieldHandler'),
+  );
+  return $api;
+}
+
+/**
+ * A Field Handler class that makes address_phone subfield destination for migate api.
+ *
+ * Arguments are used to specify all phone related values:
+ *   'phone_number',
+ *   'phone_number_extension',
+ *   'mobile_number',
+ *   'fax_number',
+ */
+class MigrateAddressPhoneFieldHandler extends MigrateFieldHandler {
+  public function __construct() {
+    $this->dependencies = array('MigrateAddressFieldHandler');
+    $this->registerTypes(array('addressfield'));
+  }
+
+  /**
+   * Provide subfields for the addressfield columns.
+   */
+  public function fields() {
+    // Declare our arguments to also be available as subfields.
+    $fields = array(
+      'phone_number' => t('Phone Number'),
+      'phone_number_extension' => t('extension'),
+      'mobile_number' => t('Mobile Number'),
+      'fax_number' => t('Fax Number'),
+    );
+    return $fields;
+  }
+
+  /**
+   * Implements MigrateFieldHandler::prepare().
+   *
+   * @param $entity
+   * @param array $field_info
+   * @param array $instance
+   * @param array $values
+   *
+   * @return null
+   */
+  public function prepare($entity, array $field_info, array $instance,
+                          array $values) {
+    dpm($values);
+    $arguments = array();
+    if (isset($values['arguments'])) {
+      $arguments = array_filter($values['arguments']);
+      unset($values['arguments']);
+    }
+    $language = $this->getFieldLanguage($entity, $field_info, $arguments);
+
+    return isset($return) ? $return : NULL;
+  }
+}
\ No newline at end of file
